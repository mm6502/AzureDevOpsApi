name: Publish Module

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    tags: [ 'v*' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for creating releases
      pull-requests: read

    env:
      ModuleName: AzureDevOpsApi

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a set of commands using the runners shell
      - name: Prepare Module for Publishing
        shell: pwsh
        env:
          ModuleName: ${{ env.ModuleName }}
        run: |
          # Create a clean directory for publishing
          $tempPath = New-Item -ItemType Directory -Force -Path $env:ModuleName

          # Copy only desired files
          @(
              'Init'
              'Private'
              'Public'
              'LICENSE.txt'
              'README.md'
              '*.psd1'
              '*.psm1'
          ) `
          | ForEach-Object {
              Join-Path -Path '.\' -ChildPath $_ -Resolve
          } `
          | Copy-Item -Recurse -Destination $tempPath

      - name: Install Required Modules
        shell: pwsh
        run: |
          Install-Module -Name ImportExcel -Scope CurrentUser -Force
          Install-Module -Name powershell-yaml -Scope CurrentUser -Force

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ModuleName: ${{ env.ModuleName }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          body: |
            ## Changes in ${{ github.ref_name }}

            This release includes the ${{ env.ModuleName }} PowerShell module.

            ### Installation
            ```powershell
            Install-Module -Name ${{ env.ModuleName }} -Repository PSGallery
            ```
          draft: false
          prerelease: false

      - name: Publish to PowerShell Gallery
        shell: pwsh
        env:
          ModuleName: ${{ env.ModuleName }}
          PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
        run: |
          # Verify the API key is available
          if (-not $env:PSGALLERY_API_KEY) {
              throw "NuGet API Key is not set"
          }

          # Publish the module
          $tempPath = Resolve-Path -Path $env:ModuleName
          Publish-Module -Path $tempPath -NuGetApiKey $env:PSGALLERY_API_KEY -Verbose
